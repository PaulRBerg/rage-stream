/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Imports,
  ImportsInterface,
} from "../../../contracts/test/Imports";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a72315820441727be814b5b7447fb327ec9c026991c87c374c4eb2807f048fabefa69a9ac64736f6c63430005110032";

type ImportsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ImportsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Imports__factory extends ContractFactory {
  constructor(...args: ImportsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Imports> {
    return super.deploy(overrides || {}) as Promise<Imports>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Imports {
    return super.attach(address) as Imports;
  }
  override connect(signer: Signer): Imports__factory {
    return super.connect(signer) as Imports__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ImportsInterface {
    return new utils.Interface(_abi) as ImportsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Imports {
    return new Contract(address, _abi, signerOrProvider) as Imports;
  }
}
